<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Futon note</title><link href="http://daikishimada.github.io/" rel="alternate"></link><link href="http://daikishimada.github.io/feeds/all.atom.xml" rel="self"></link><id>http://daikishimada.github.io/</id><updated>2016-01-05T00:50:00+09:00</updated><entry><title>Pelican + Github Pages でブログを作った話</title><link href="http://daikishimada.github.io/pelican-start.html" rel="alternate"></link><updated>2016-01-05T00:50:00+09:00</updated><author><name>DaikiShimada</name></author><id>tag:daikishimada.github.io,2016-01-05:pelican-start.html</id><summary type="html">&lt;p&gt;Pelicanでこのサイトを作った時のメモ．&lt;/p&gt;
&lt;h2 id="pelican"&gt;Pelicanとは？&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican/tree/3.4.0"&gt;getpelican/pelican at 3.4.0&lt;/a&gt;は，Pythonで作られた静的webサイトジェネレータです．&lt;/p&gt;
&lt;p&gt;フランス語の"notebook"を意味する"calepin"から名付けられたらしい．&lt;br /&gt;
reStructuredText か Markdownでページ内容を記述できるのが魅力的です．&lt;/p&gt;
&lt;p&gt;テーマはWordpressほどじゃないですが，それなりにあります．&lt;br /&gt;
&lt;a href="http://www.pelicanthemes.com/"&gt;Pelican themes&lt;/a&gt;から好きなものを選ぶ事ができます．&lt;/p&gt;
&lt;p&gt;Pythonユーザとして，
- やる気出せばいじれないこともない
- テーマがそこそこカッコいい
- Markdownで記事が書ける
- &lt;a href="http://docs.getpelican.com/en/3.6.3/"&gt;ドキュメント&lt;/a&gt;が充実している
という理由で採用しました．&lt;/p&gt;
&lt;h2 id="pelican_1"&gt;Pelicanの導入&lt;/h2&gt;
&lt;p&gt;pipを使えばあっという間．Markdownも入れておきます．&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install pelican Markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;インタラクティブなコマンドツールで初期設定を済ましてくれます．&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir ./blog
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;blog
&lt;span class="nv"&gt;$ &lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下のような形で質問に回答しました．&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Welcome to pelican-quickstart v3.6.3.

This script will help you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where do you want to create your new web site? [.] .
&amp;gt; &amp;gt; What will be the title of this web site? Futon note
&amp;gt; &amp;gt; Who will be the author of this web site? DaikiShimada
&amp;gt; &amp;gt; What will be the default language of this web site? [en] ja
&amp;gt; &amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) y
&amp;gt; &amp;gt; What is your URL prefix? (see above example; no trailing slash) daikishimada.github.io
&amp;gt; &amp;gt; Do you want to enable article pagination? (Y/n) y
&amp;gt; &amp;gt; How many articles per page do you want? [10] 5
&amp;gt; &amp;gt; What is your time zone? [Europe/Paris] Asia/Tokyo
&amp;gt; &amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) y
&amp;gt; &amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) n
&amp;gt; &amp;gt; Do you want to upload your website using FTP? (y/N) n
&amp;gt; &amp;gt; Do you want to upload your website using SSH? (y/N) n
&amp;gt; &amp;gt; Do you want to upload your website using Dropbox? (y/N) n
&amp;gt; &amp;gt; Do you want to upload your website using S3? (y/N) n
&amp;gt; &amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) n
&amp;gt; &amp;gt; Do you want to upload your website using GitHub Pages? (y/N) y
&amp;gt; &amp;gt; Is this your personal page (username.github.io)? (y/N) y
&amp;gt; Done. Your new project is available at /Users/sheema/Documents/web/pelican-test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ここで，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt; &amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と答えておくと，ディレクトリにHTML生成用のMakefileとfabfile.pyを生成してくれます．&lt;br /&gt;
makeコマンドやfabコマンドでHTMLを生成出来るようになるので，pelicanのオプションを毎回叩く必要がなくなる（はず）．&lt;/p&gt;
&lt;p&gt;あとは，&lt;code&gt;content/&lt;/code&gt;以下に記事を書いていけばok.  &lt;/p&gt;
&lt;p&gt;ちなみに，ブログじゃないページは&lt;code&gt;content/pages/&lt;/code&gt;にファイルを置いていけば良いみたいです．&lt;/p&gt;
&lt;h3 id="_1"&gt;記事の生成と確認&lt;/h3&gt;
&lt;p&gt;Markdownからhtmlに書き出して欲しい時は，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でhtmlを吐き出してくれます．初期設定では&lt;code&gt;output/&lt;/code&gt;以下に内容が出力されます．&lt;/p&gt;
&lt;p&gt;htmlの確認をする時は，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とすると，http://localhost:8000でwebサーバを走らせてくれるので，表示などをローカル環境で確認できます．&lt;/p&gt;
&lt;p&gt;公開用にhtmlを吐き出したい時は，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make publish
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でやってくれます．&lt;/p&gt;
&lt;h2 id="_2"&gt;テーマの導入&lt;/h2&gt;
&lt;p&gt;ロシア製のテーマ&lt;a href="https://github.com/Samael500/w3-personal-blog"&gt;Samael500/w3-personal-blog&lt;/a&gt;をお借りします．&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/Samael500/w3-personal-blog.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ところどころ文言がロシア語なので，&lt;code&gt;w3-personal-blog/template/&lt;/code&gt;内のファイルの一部を適宜書き換える．&lt;br /&gt;
ここが地味に大変だった…&lt;/p&gt;
&lt;h3 id="pelican_2"&gt;pelican にテーマを反映&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt;にはサイトの設定を書き込む様になっています．&lt;br /&gt;
以下の記述をして，pelicanに使うテーマのディレクトリを知らせる．&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;THEME = &amp;#39;./w3-personal-blog-master&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="github-pages"&gt;Github Pages のリポジトリの準備&lt;/h2&gt;
&lt;p&gt;Github Pagesにはユーザが1つだけ持てるサイトとリポジトリ毎に作れるサイト(Project page)の2種類があります．&lt;br /&gt;
今回はユーザ用のサイトを作成しました．&lt;/p&gt;
&lt;h3 id="_3"&gt;公開用リポジトリの作成&lt;/h3&gt;
&lt;p&gt;ユーザ用サイトは&lt;code&gt;ユーザ名.github.io&lt;/code&gt;というリポジトリを作成すれば良いので，&lt;code&gt;daikihsimada.github.io&lt;/code&gt;というリポジトリを作成．&lt;/p&gt;
&lt;p&gt;このリポジトリのmasterブランチにhtmlファイルをアップロードすると，自動的に&lt;code&gt;ユーザ名.github,io&lt;/code&gt;というURLのwebサイトとしてアクセスができるようになります．&lt;/p&gt;
&lt;h3 id="_4"&gt;ソース管理用リポジトリの作成&lt;/h3&gt;
&lt;p&gt;webサイトの公開自体は&lt;code&gt;ユーザ名.github.io&lt;/code&gt;で行いますが，サイト生成に必要なMarkdownファイルやテーマ，pelicanの諸々のファイルは公開する必要が無いので，別のprivateなリポジトリで管理することにしました．&lt;/p&gt;
&lt;p&gt;pelicanをセットアップした&lt;code&gt;blog/&lt;/code&gt;を管理用リポジトリで管理することにしました．&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git init
git remote add origin 管理用リポジトリ
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;それと，.gitignoreは以下のように．&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;*.pyc
output/
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_5"&gt;サイトの公開&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/davisp/ghp-import"&gt;davisp/ghp-import&lt;/a&gt;というPythonモジュールを利用すれば，便利にGithub Pagesへのページ公開が行えます．&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;適当に記事を書いて，公開してみる.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make publish

&lt;span class="c"&gt;# outputディレクトリをgh-pagesブランチに&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;ghp-import output

&lt;span class="c"&gt;# gh-pagesブランチを公開リポジトリのmasterへpush&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push https://github.com/DaikiShimada/daikishimada.github.io.git gh-pages:master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;テーマのカスタマイズにこだわると，時間はかかってしまいますが，
比較的簡単にサイトを公開できます．&lt;/p&gt;
&lt;p&gt;テーマのカスタマイズも，Pythonユーザなら比較的わかりやすい記述になっているので，少しコードを読めば大丈夫だと思います．&lt;br /&gt;
vim で記事を書いてGitで記事のソースまで管理できてしまうので，精神衛生上すごく快適です．&lt;/p&gt;
&lt;h2 id="_6"&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://memo.laughk.org/2014/08/10/tinker2pelican-repo.html"&gt;ブログジェネレータをTinkererからPelicanに移行した - 続・ラフなラボ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://draftcode.github.io/2012/03/16/42a4fd48-6f58-11e1-bdce-040ccee352e6.html"&gt;PelicanとGitHub Pagesを使う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dackdive.hateblo.jp/entry/2015/12/20/124055"&gt;[Python]PelicanでGitHub Pages上にブログを構築する(Django Girls for Everyone #2 参加メモ) - dackdive's blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.sotm.jp/2014/01/04/Pelican-Markdown-GithubPages-install-guide/#github-pages_1"&gt;Pelican + Markdown + GitHub Pagesで管理するブログの作り方 - blog@sotm.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="pelican"></category><category term="web"></category><category term="python"></category></entry><entry><title>初投稿</title><link href="http://daikishimada.github.io/first-post.html" rel="alternate"></link><updated>2016-01-02T04:00:00+09:00</updated><author><name>DaikiShimada</name></author><id>tag:daikishimada.github.io,2016-01-02:first-post.html</id><summary type="html">&lt;p&gt;なんかもう，ブログを作るのは3つ目くらいなんだけれども，
はてなも微妙にいじりづらい，Wordpressも管理とかプラグインとか辛いというわがままの結果，
"Github pagesでホスティングをして，Markdownから静的にhtmlを吐いて"ブログを書くことにしてみました．&lt;/p&gt;
&lt;p&gt;これなら，Gitで記事の管理もできるし(前は自分でGit経由でWPをポストするスクリプトを書いていた!!)，
プロフィールのような記事じゃないページも好きな様に作ることが出来る．めでたし．&lt;/p&gt;
&lt;h2 id="_1"&gt;知っていることを吐き出すということ&lt;/h2&gt;
&lt;p&gt;去年は，何かやった記録やノウハウは全てEvernoteへ詰め込んでいて，
別に外に見える形で記録をしなくても良いんじゃないかと思っていました．&lt;/p&gt;
&lt;p&gt;しかし，他の方から何かを尋ねられることもあったり，
自分でも"こういう文章があると色んな人が時間を無駄にせずすむよな"と思うこともあったりで，
ちょっとしたことでも外からアクセスできる形で残しておくことにしました．&lt;/p&gt;
&lt;h2 id="_2"&gt;書くこと&lt;/h2&gt;
&lt;p&gt;当面は，時間があるときに研究で調べたことや，自分で興味があることについて備忘録的にまとめてみよう...&lt;/p&gt;
&lt;p&gt;こういう文章がほしいなと思うものもあるので，
少しずつ少しずつ書いては公開してみるものもあるかな...
(特に，汎用人工知能&lt;AGI&gt;やConvolutional Neural Networksについては私の専門が近いながら体系的な文章が少ないので，少しずつ文章にしてみたい)&lt;/p&gt;
&lt;p&gt;そういえば，これは数式が書けるのか？
それとソースコードのハイライトはどんな感じで写るんだ...確認していなかった...&lt;/p&gt;
&lt;h2 id="_3"&gt;サイト周りでやるべきこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数式(LaTex)を表示できるようにする&lt;/li&gt;
&lt;li&gt;プロフィールページを作る(ja/en)&lt;/li&gt;
&lt;li&gt;pelican(このサイトのジェネレータ)について少し書く&lt;/li&gt;
&lt;li&gt;DUSQUSを入れてみる(使う人いるのか？)&lt;/li&gt;
&lt;/ul&gt;</summary><category term="雑記"></category><category term="AI"></category><category term="研究"></category></entry></feed>